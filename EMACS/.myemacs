;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; append-tuareg.el - Tuareg quick installation: Append this file to .emacs.

(add-to-list 'auto-mode-alist '("\\.ml[iylp]?" . tuareg-mode))
(autoload 'tuareg-mode "tuareg" "Major mode for editing Caml code" t)
(autoload 'camldebug "camldebug" "Run the Caml debugger" t)
(dolist (ext '(".cmo" ".cmx" ".cma" ".cmxa" ".cmi"))
  (add-to-list 'completion-ignored-extensions ext))

(load "~/.emacs.d/ll-debug")
(require 'll-debug)

(load "~/.emacs.d/autopair.el")
(require 'autopair)
(autopair-global-mode)

(setq frame-title-format '(buffer-name "%f" ("%b")))

(custom-set-faces
 '(font-lock-builtin-face ((((class color) (min-colors 8)) (:foreground "red"))))
 '(font-lock-function-name-face ((((class color) (min-colors 8)) (:foreground "blue" :weight ultra-bold))))
 '(hl-line ((t (:weight bold))))
 '(linum ((t (:inherit (shadow default) :background "#DE"))))
 )

; L I N E
;(global-linum-mode 1)
;(custom-set-variables '(linum-format 'dynamic))
;(defadvice linum-update-window (around linum-dynamic activate)
;  (let* ((w (length (number-to-string
;		     (count-lines (point-min) (point-max)))))
;	 (linum-format (concat "%-" (number-to-string w) "d ")))
;    ad-do-it))

;=================
; S N I P P E T S
;================
(add-to-list 'load-path
	     "~/.emacs.d/plugins/yasnippet")
(require 'yasnippet)
(yas-global-mode 1)


;==========================
; A U T O - C O M P L E T E
;==========================
(add-to-list 'load-path "~/.emacs.d/auto-complete")
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/auto-complete/ac-dict")

(ac-set-trigger-key "TAB")
(ac-set-trigger-key "<tab>")
(global-auto-complete-mode t)
; Start auto-completion after 2 characters of a word
(setq ac-auto-start 2)
; case sensitivity is important when finding matches
(setq ac-ignore-case nil)


(defun prefix-list-elements (list prefix)
  (let (value)
    (nreverse
     (dolist (element list value)
       (setq value (cons (format "%s%s" prefix element) value))))))
(defvar ac-source-rope
  '((candidates
     . (lambda ()
	 (prefix-list-elements (rope-completions) ac-target))))
  "Source for Rope")
(defun ac-python-find ()
  "Python `ac-find-function'."
  (require 'thingatpt)
  (let ((symbol (car-safe (bounds-of-thing-at-point 'symbol))))
    (if (null symbol)
	(if (string= "." (buffer-substring (- (point) 1) (point)))
	    (point)
	  nil)
      symbol)))
(defun ac-python-candidate ()
  "Python `ac-candidates-function'"
  (let (candidates)
    (dolist (source ac-sources)
      (if (symbolp source)
	  (setq source (symbol-value source)))
      (let* ((ac-limit (or (cdr-safe (assq 'limit source)) ac-limit))
	     (requires (cdr-safe (assq 'requires source)))
	     cand)
	(if (or (null requires)
		(>= (length ac-target) requires))
	    (setq cand
		  (delq nil
			(mapcar (lambda (candidate)
				  (propertize candidate 'source source))
				(funcall (cdr (assq 'candidates source)))))))
	(if (and (> ac-limit 1)
		 (> (length cand) ac-limit))
	    (setcdr (nthcdr (1- ac-limit) cand) nil))
	(setq candidates (append candidates cand))))
    (delete-dups candidates)))
(add-hook 'python-mode-hook
	  (lambda ()
	    (auto-complete-mode 1)
	    (set (make-local-variable 'ac-sources)
		 (append ac-sources '(ac-source-rope) '(ac-source-yasnippet)))
	    (set (make-local-variable 'ac-find-function) 'ac-python-find)
	    (set (make-local-variable 'ac-candidate-function) 'ac-python-candidate)
	    (set (make-local-variable 'ac-auto-start) nil)))





;=================
; M A R K D O W N
;================
(add-to-list 'load-path "~/.emacs.d/mode/")
(autoload 'markdown-mode "markdown-mode"
     "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

;====================
; R A C C O U R C I S
;====================
(global-set-key [f12] 'split-window-horizontally)
(global-set-key [C-f12] 'convert-window-to-term)

(global-set-key [M-left] 'windmove-left)          ; move to left windnow
(global-set-key [M-right] 'windmove-right)        ; move to right window
(global-set-key [M-up] 'windmove-up)              ; move to upper window
(global-set-key [M-down] 'windmove-down)          ; move to downer window

(global-set-key [f6]'comment-region)
(global-set-key [S-f6]'uncomment-region)
(global-set-key "\M-:" 'll-debug-toggle-comment-region-or-line)

(set-language-environment "UTF-8")

;=========================================
; P A R E N T H E S E  C O L O R A T I O N
;=========================================
(load "~/.emacs.d/rainbow-delimiters.elc")
(require 'rainbow-delimiters)
(global-rainbow-delimiters-mode)

;===================================
; P A R E N T H E S E  M A T C H E R
;===================================
(require 'paren)
(show-paren-mode)


;; Coupe la fenetre verticalement et creer un terminal dans la fenetre coupe
(defun convert-window-to-term ()
  "If ansi-term is not existed, start a new one & switch to them"
  (interactive)
    (ansi-term "/bin/zsh"))


;; Retrait du menu
(menu-bar-mode -1)

;================
; S K E L E T O N
;================ 
(load "~/.emacs.d/skeleton.el")
;; Makefile
(add-hook 'find-file-hook
	  (lambda()
	    (if (and
		 (string-match "\\Makefile$" (buffer-file-name))
		 (= (buffer-size) 0))
		(create-makefile))))

;; Header
(add-hook 'find-file-hook
	  (lambda()
	    (if (and
		 (string-match "\\.h$" (buffer-file-name))
		 (= (buffer-size) 0))
		(insert-protect-header
		 (goto-line 4)))))

(add-hook 'find-file-hook
	  (lambda()
	    (if (and
		 (string-match "\\.hh$" (buffer-file-name))
		 (= (buffer-size) 0))
		(insert-protect-hheader
		 (goto-line 4)))))

;; HL Line
(global-hl-line-mode 1)

;; Remplacer le texte selectionne si on tape
(delete-selection-mode 1)

;; Coloration Syntaxique
(global-font-lock-mode 1)

;; Auto Tab
(setq c-auto-newline 1)
;; Indentation automatique
(global-set-key "\C-m" 'newline-and-indent)

;; Suppression des espaces en fin de ligne a l'enregistrement
(add-hook 'c++-mode-hook '(lambda ()
			    (add-hook 'write-contents-hooks 'delete-trailing-whitespace nil t)))
(add-hook 'c-mode-hook '(lambda ()
			    (add-hook 'write-contents-hooks 'delete-trailing-whitespace nil t)))

;; Laisser le curseur en place lors d'un defilement par pages.
;; Par defaut, Emacs place le curseur en debut ou fin d'ecran
;; selon le sens du defilement.
(setq scroll-preserve-screen-position t)

;; Complette automatiquement ce que vous tapez dans le mini-buffer
;;(icomplete-mode 1)

;; Pouvoir utiliser la completition sous emacs en ignorant la casse
(setq completion-ignore-case 1)

;; Supprime les fichier ~
(setq make-backup-files nil)

;; yes > y | no > n
(fset 'yes-or-no-p 'y-or-n-p)

;; Affiche le numero de ligne et de colonne
(column-number-mode 1)
(line-number-mode 1)

;; Enlever le message au demarrage
(setq inhibit-startup-message 1)

;; Remplacer le texte selectionne si on tape
(delete-selection-mode 1)

;; Affiche l'heure au format 24h
(setq display-time-24hr-format 1)
(setq displat-time-day-and-date 1)

;; ido mode
(require 'ido)
(ido-mode t)
(setq ido-enable-flex-matching t)